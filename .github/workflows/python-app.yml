name: Deploy Python App to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug Variables and Secrets Presence
        run: |
          # Check EC2_USER as a variable
          if [ -z "${{ vars.EC2_USER }}" ]; then
            echo "::error::EC2_USER variable is NOT set or is empty. Please check your repository or organization variables."
            exit 1
          else
            echo "‚úÖ EC2_USER variable is properly set (non-empty)."
          fi
          
          # NOTE: The host must still be fixed in your GitHub secrets!
          if [ -z "${{ secrets.EC2_HOST }}" ] || [ "${{ secrets.EC2_HOST }}" = "***" ]; then
            echo "::error::EC2_HOST secret is NOT set, is empty, or is the placeholder '***'. FIX THIS IN GITHUB SECRETS."
            exit 1
          else
            echo "‚úÖ EC2_HOST secret is properly set (non-empty and not '***')."
          fi

        cat ${{ secrets.EC2_SSH_KEY }}
        cat ${{ secrets.EC2_HOST }}
        cat ${{ vars.EC2_USER }}
        cat ${{ vars.REMOTE_PATH }}

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add EC2 host to known_hosts
        run: |
          # This prevents the interactive "Are you sure you want to continue connecting?" prompt.
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: |
          # Use var for user and secret for host
          if [ -z "${{ vars.EC2_USER }}" ] || [ -z "${{ secrets.EC2_HOST }}" ]; then
            echo "::error::EC2_USER (var) or EC2_HOST (secret) is empty. SSH command will fail."
            exit 1
          fi
          ssh -o StrictHostKeyChecking=no \
            ${{ vars.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful!'"

      - name: Create remote directory
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${{ vars.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p ${{ vars.REMOTE_PATH }}"

      - name: Sync code to EC2 using rsync
        run: |
          rsync -avz --delete \
            --exclude='.git/' \
            --exclude='venv/' \
            --exclude='__pycache__/' \
            --exclude='*.pyc' \
            --exclude='.env' \
            --exclude='.github/' \
            --exclude='*.log' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ \
            ${{ vars.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ vars.REMOTE_PATH }}/

      - name: Install dependencies and restart application
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${{ vars.EC2_USER }}@${{ secrets.EC2_HOST }} '
            set -e # Exit immediately if any command fails
            
            cd ${{ vars.REMOTE_PATH }}
            
            # Activate virtual environment or create if doesn't exist
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate
            
            # Install/update dependencies
            pip install --upgrade pip
            pip install -r requirements.txt
            
            # Restart application using PM2 (or systemd)
            pm2 restart python-app || pm2 start app/main.py --name python-app --interpreter python3
            
            echo "Deployment commands executed."
          '

      - name: Cleanup
        # Always run cleanup, even if previous steps fail
        if: always()
        run: |
          # The ssh-agent action handles cleanup automatically.
          rm -f ~/.ssh/known_hosts

      - name: Deployment Status
        run: |
          echo "üöÄ Deployment process completed."
          echo "üìÖ Deployed at: $(date)" # Use $() for command substitution
          echo "üìù Commit: ${{ github.sha }}"
