name: Deploy Python App to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug Variables and Secrets Presence
        run: |
          # Check EC2_USER as a variable
          if [ -z "${{ vars.EC2_USER }}" ]; then
            echo "::error::EC2_USER variable is NOT set or is empty. Please check your repository or organization variables."
            exit 1
          else
            echo "‚úÖ EC2_USER variable is properly set (non-empty)."
          fi
          
          # NOTE: The host must still be fixed in your GitHub secrets!
          if [ -z "${{ secrets.EC2_HOST }}" ] || [ "${{ secrets.EC2_HOST }}" = "***" ]; then
            echo "::error::EC2_HOST secret is NOT set, is empty, or is the placeholder '***'. FIX THIS IN GITHUB SECRETS."
            exit 1
          else
            echo "‚úÖ EC2_HOST secret is properly set (non-empty and not '***')."
          fi

          if [ -z "${{ secrets.EC2_SSH_KEY }}" ]; then
            echo "::error::EC2_SSH_KEY secret is NOT set or is empty. Please check your GitHub Secrets."
            exit 1
          else
            echo "‚úÖ EC2_SSH_KEY secret is present."
          fi

          echo "EC2_HOST: ${{ secrets.EC2_HOST }}"
          echo "EC2_USER: ${{ vars.EC2_USER }}"
          echo "REMOTE_PATH: ${{ vars.REMOTE_PATH }}"

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add EC2 host to known_hosts
        run: |
          # This prevents the interactive "Are you sure you want to continue connecting?" prompt.
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: |
          # Use var for user and secret for host
          if [ -z "${{ vars.EC2_USER }}" ] || [ -z "${{ secrets.EC2_HOST }}" ]; then
            echo "::error::EC2_USER (var) or EC2_HOST (secret) is empty. SSH command will fail."
            exit 1
          fi
          ssh -o StrictHostKeyChecking=no \
            ${{ vars.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful!'"

      - name: Create remote directory
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${{ vars.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p ${{ vars.REMOTE_PATH }}"

      - name: Sync code to EC2 using rsync
        run: |
          rsync -avz --delete \
            --exclude='.git/' \
            --exclude='venv/' \
            --exclude='__pycache__/' \
            --exclude='*.pyc' \
            --exclude='.env' \
            --exclude='.github/' \
            --exclude='*.log' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ \
            ${{ vars.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ vars.REMOTE_PATH }}/

      - name: 1. Install System Prerequisites on EC2
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${{ vars.EC2_USER }}@${{ secrets.EC2_HOST }} '
            set -e # Exit immediately if any command fails

            # Ensure Python 3.11 is installed via the deadsnakes PPA
            # This requires the EC2_USER to have passwordless sudo privileges.
            if ! command -v python3.11 &> /dev/null; then
              echo "Python 3.11 not found. Installing..."
              sudo apt-get update -y
              sudo apt-get install -y software-properties-common
              sudo add-apt-repository -y ppa:deadsnakes/ppa
              sudo apt-get install -y python3.11 python3.11-venv python3.11-dev python3.11-distutils build-essential
            else
              echo "‚úÖ Python 3.11 is already installed."
            fi

            # Ensure Node.js and npm are installed to get PM2
            if ! command -v pm2 &> /dev/null; then
              echo "PM2 not found. Installing..."
              # This assumes Node.js/npm also need to be installed if PM2 is missing.
              sudo apt-get update -y
              sudo apt-get install -y nodejs npm
              sudo npm install -g pm2
            else
              echo "‚úÖ PM2 is already installed."
            fi
            echo "System prerequisites check complete."
          '

      - name: 2. Setup Python Environment on EC2
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${{ vars.EC2_USER }}@${{ secrets.EC2_HOST }} '
            set -e
            cd ${{ vars.REMOTE_PATH }}

            # Create virtual environment if it does not exist
            if [ ! -d "venv" ]; then
              echo "Creating Python virtual environment..."
              python3.11 -m venv venv
            fi

            # Install/update dependencies
            echo "Installing/updating dependencies..."
            venv/bin/pip install --upgrade pip
            venv/bin/pip install -r requirements.txt
            echo "Python environment is ready."
          '

      - name: 3. Restart Application with PM2 on EC2
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${{ vars.EC2_USER }}@${{ secrets.EC2_HOST }} '
            set -e
            cd ${{ vars.REMOTE_PATH }}

            # Source the user's profile to ensure the PATH is set correctly for npm global packages.
            # This makes sure that 'pm2' can be found.
            source ~/.profile || true

            echo "Restarting application with system PM2..."
            # Find the full path to the pm2 executable. This is more reliable than relying on the shell's PATH.
            PM2_PATH=$(which pm2)
            if [ -z "$PM2_PATH" ]; then
              echo "::error::pm2 executable not found on the remote server!"
              exit 1
            fi

            # Use 'reload' for zero-downtime reloads, and fallback to 'start' if the app isn't running yet.
            $PM2_PATH reload python-app --update-env || $PM2_PATH start "venv/bin/python" --name "python-app" -- -m uvicorn app.main:app --host 0.0.0.0 --port 8000

            # Save the PM2 process list to resurrect on reboot
            $PM2_PATH save
            echo "Deployment commands executed."
          '

      - name: 4. Verify Deployment Health
        run: |
          echo "Pinging the health check endpoint..."
          # Wait a few seconds for the server to start
          sleep 5
          curl --fail http://${{ secrets.EC2_HOST }}:8000/health

      - name: Cleanup
        # Always run cleanup, even if previous steps fail
        if: always()
        run: |
          # The ssh-agent action handles cleanup automatically.
          rm -f ~/.ssh/known_hosts

      - name: Deployment Status 
        run: |
          echo "üöÄ Deployment process completed."
          echo "üìÖ Deployed at: $(date)" # Use $() for command substitution
          echo "üìù Commit: ${{ github.sha }}"