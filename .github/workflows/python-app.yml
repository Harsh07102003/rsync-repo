name: Deploy Python App to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          # 1. Create .ssh directory if it doesn't exist
          mkdir -p ~/.ssh
          
          # 2. Write the private key from secrets to a file
          # The key variable name MUST match what you stored in GitHub Secrets
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key.pem
          
          # 3. Set restrictive permissions for security
          chmod 600 ~/.ssh/deploy_key.pem
          
          # 4. Add the EC2 host key to known_hosts to bypass manual confirmation
          # This requires the host secret to be correctly set.
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          
          # NOTE: Removed 'cat ~/.ssh/deploy_key.pem' for security reasons.
          # You should not print private keys to the log.

      - name: Test SSH Connection
        # This is the step that was failing due to improper substitution or setup.
        # Ensure your secrets EC2_USER and EC2_HOST are correctly set.
        run: |
          ssh -i ~/.ssh/deploy_key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful!'"

      - name: Create remote directory
        run: |
          ssh -i ~/.ssh/deploy_key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p ${{ vars.REMOTE_PATH }}"

      - name: Sync code to EC2 using rsync
        run: |
          rsync -avz --delete \
            --exclude='.git/' \
            --exclude='venv/' \
            --exclude='__pycache__/' \
            --exclude='*.pyc' \
            --exclude='.env' \
            --exclude='.github/' \
            --exclude='*.log' \
            -e "ssh -i ~/.ssh/deploy_key.pem -o StrictHostKeyChecking=no" \
            ./ \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ vars.REMOTE_PATH }}/

      - name: Install dependencies and restart application
        run: |
          # The '<< 'EOF'' syntax allows running multiple commands on the remote server
          ssh -i ~/.ssh/deploy_key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e # Exit immediately if any command fails
            
            cd ${{ vars.REMOTE_PATH }}
            
            # Activate virtual environment or create if doesn't exist
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate
            
            # Install/update dependencies
            pip install --upgrade pip
            pip install -r requirements.txt
            
            # Restart application using PM2 (or systemd)
            pm2 restart python-app || pm2 start app/main.py --name python-app --interpreter python3
            
            echo "Deployment commands executed."
          EOF

      - name: Cleanup
        # Always run cleanup, even if previous steps fail
        if: always()
        run: |
          # Remove the private key from the runner environment
          rm -f ~/.ssh/deploy_key.pem
          rm -f ~/.ssh/known_hosts

      - name: Deployment Status
        run: |
          echo "🚀 Deployment process completed."
          echo "📅 Deployed at: $(date)" # Use $() for command substitution
          echo "📝 Commit: ${{ github.sha }}"